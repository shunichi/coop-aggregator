importScripts('https://storage.googleapis.com/workbox-cdn/releases/3.6.3/workbox-sw.js');

const STATIC_ASSETS = [
  '<%= asset_path "application.js" %>',
  '<%= asset_path "application.css" %>',
  '<%= Webpacker.manifest.lookup "application.js" %>',
  '/offline.html',
  '/pwa',
  '/favicon.ico',
];
const CACHE_VERSION = 'v10';
const IMAGE_CACHE_PREFIX = 'coop-aggregator-image-';
const IMAGE_CACHE_NAME = IMAGE_CACHE_PREFIX + CACHE_VERSION;

workbox.core.setCacheNameDetails({
  prefix: 'coop-aggregator',
  suffix: CACHE_VERSION
});

// workbox には古いバージョンの cache や indexedDB を消す機能はないようなので、
// 自分で削除する
// https://github.com/GoogleChrome/workbox/issues/1407
let currentCacheNames = Object.assign(
  { precacheTemp: workbox.core.cacheNames.precache + "-temp" },
  workbox.core.cacheNames
);
currentCacheNames.imageCache = IMAGE_CACHE_NAME;

function deleteIndexedDB(dbname) {
  return new Promise((resolve, reject) => {
    const request = indexedDB.deleteDatabase(dbname);
    request.onerror = (evt) => reject(evt.target.error);
    request.onblocked = () => reject(new Error('Deletion was blocked.'));
    request.onsuccess = () => resolve();
  });
}

self.addEventListener("activate", function(event) {
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      let validCacheSet = new Set(Object.values(currentCacheNames));
      return Promise.all(
        cacheNames
          .filter(function(cacheName) {
            return !validCacheSet.has(cacheName);
          })
          .map(function(cacheName) {
            console.log("deleting cache", cacheName);
            // 存在しない indexedDB を削除しても成功する仕様のようだ
            // https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase
            deleteIndexedDB(cacheName)
              .then(() => console.log("indexedDB deleted: " + cacheName) )
              .catch((error) => console.log(error));
            return caches.delete(cacheName);
          })
      );
    })
  );
});

// https://developers.google.com/web/tools/workbox/guides/advanced-recipes#use_postmessage_to_notify_of_cache_updates
const postMessagePlugin = {
  cacheDidUpdate: async ({cacheName, request, oldResponse, newResponse}) => {
    // Use whatever logic you want to determine whether the responses differ.
    if (oldResponse && (oldResponse.headers.get('etag') !== newResponse.headers.get('etag'))) {
      const clients = await self.clients.matchAll();
      for (const client of clients) {
        // Use whatever message body makes the most sense.
        // Note that `Response` objects can't be serialized.
        client.postMessage({url: request.url, cacheName});
      }
    }
  },
};

workbox.precaching.precacheAndRoute(STATIC_ASSETS, {
  ignoreUrlParametersMatching: [/^body$/, /^homescreen$/]
});
workbox.routing.registerRoute(
  '/api/deliveries',
  workbox.strategies.staleWhileRevalidate({
    plugins: [postMessagePlugin],
  })
);
workbox.routing.registerRoute(
  new RegExp('^https://shop.pal-system.co.jp/(palimage/ItemImage|pal/InesPageImage)'),
  workbox.strategies.networkFirst({
    cacheName: IMAGE_CACHE_NAME,
    plugins: [
      new workbox.expiration.Plugin({
        maxEntries: 50,
        maxAgeSeconds: 14 * 24 * 60 * 60, // 14 Days
        purgeOnQuotaError: true,
      })
    ]
  })
);
