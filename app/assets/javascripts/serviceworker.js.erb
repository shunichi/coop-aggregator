const STATIC_CACHE_NAME = 'coop-aggregator-sw-cache-static-v1';
const DYNAMIC_CACHE_NAME = 'coop-aggregator-sw-cache-dynamic-v1';
const IMAGE_CACHE_NAME = 'coop-aggregator-sw-cache-image-v1';
const CACHE_NAMES = [STATIC_CACHE_NAME, DYNAMIC_CACHE_NAME];
const HOST_NAME = '<%= ENV["SERVER_HOST_NAME"] %>';
const STATIC_ASSETS = [
  '<%= asset_path "application.js" %>',
  '<%= asset_path "application.css" %>',
  '<%= Webpacker.manifest.lookup "application.js" %>',
  '/offline.html',
  '/pwa',
  '/favicon.ico',
];

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME).then(function prefill(cache) {
      return cache.addAll(STATIC_ASSETS);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return (CACHE_NAMES.indexOf(cacheName) !== -1);
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

function onFetch(event) {
  const requestURL = new URL(event.request.url);
  if (requestURL.hostname == HOST_NAME) {
    // console.log('request: ' + requestURL.pathname);
    if (requestURL.pathname === '/api/deliveries') {
      // console.log('dynamic: ' + requestURL.pathname);
      return event.respondWith(cacheFirst(DYNAMIC_CACHE_NAME, event.request));
    }
    if (STATIC_ASSETS.indexOf(requestURL.pathname) !== -1) {
      // console.log('static: ' + requestURL.pathname);
      return event.respondWith(cacheOrFetch(STATIC_CACHE_NAME, event.request));
    }
  }
  const imagePathRegexp = new RegExp('^/palimage/ItemImage')
  if (requestURL.hostname == 'shop.pal-system.co.jp' && imagePathRegexp.test(requestURL.pathname)) {
    return event.respondWith(cacheOrFetch(IMAGE_CACHE_NAME, event.request));
  }
  return event.respondWith(networkFirst(event.request));
}

function cacheOrFetch(cacheName, request) {
  return caches.open(cacheName).then(function(cache) {
    return cache.match(request).then(function(response) {
      if (response) {
        return response;
      }
      return fetch(request).then(function(networkResponse) {
        cache.put(request, networkResponse.clone());
        return networkResponse;
      });
    });
  });
}

function cacheFirst(cacheName, request) {
  return caches.open(cacheName).then(function(cache) {
    return cache.match(request).then(function(response) {
      const fetchPromise = fetch(request).then(function(networkResponse) {
        cache.put(request, networkResponse.clone());
        return networkResponse;
      }).catch(function() { return new Response(); });
      return response || fetchPromise;
    });
  });
}

function networkFirst(request) {
  // try to return untouched request from network first
  return fetch(request).catch(function() {
    // if it fails, try to return request from the cache
    return caches.match(request).then(function(response) {
      if (response) {
        return response;
      }
      // if not found in cache, return default offline content for navigate requests
      if (request.mode === 'navigate' ||
        (request.method === 'GET' && request.headers.get('accept').includes('text/html'))) {
        console.log('[Serviceworker]', "Fetching offline content", event);
        return caches.match('/offline.html');
      }
    })
  })
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
